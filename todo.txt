# -*- org -*-

** Last

*** restore some elements from the deleted Makefile in
https://github.com/aryx/syncweb/commit/8cc3f10599bf65ab57947950f30cb6b18d83db14

** last

*** see autodefs.ocaml script in fork-tiger/old/
to pretty print better ocaml code.
Try on VCS.nw? just copy what noweb does
in syncweb -to_tex

*** fix the int x = ...; that leads to
a Uses x
probably because graph_code_c unsugar such decl as a decl + separate assign.

*** populate also hdefs_and_uses_of_chunkid
and support \swuses{} and use it for lname, etc?
also for rules? meh.

*** index external functions, put 'print (stdio.h)'
now that mk index use header deps (to have a low number of lookup
failures), I can use those header information to improve the automatic indexing


** literate programming automatic index
step1: DONE get an index displayed
step2: DONE get complete and correct index displayed (use codegraph? cover fields?)
step3: SEMI get nice index displayed (in margin? mini indexes? no duplicate, sorted)

*** syncweb/noweb

**** handle twocolumns format, right now the chunk crossrefs triangle
are at the wrong place 

**** have index on double columns?
\twocolumn causes a pagebreak

**** can use makeindex? look what I did for my PhD thesis

**** less: [<xxx|ttt>]
so can reference right chunk!
maybe no need now that I use candidate strategy,
maybe for OCaml it can be useful, but not even sure

**** maybe do not add subpageref for entities that are
defined partly in the same section (when functions defined by multiple pieces)

*** syncweb/codegraph

**** later: generate refs for stuff from stdlib?
nil, strlen, etc? with reference to Libcore?

**** later: codegraph for C via 5c-in-ocaml, so have use deps for fields too
long, lots of stuff to fix in 5c-in-ocaml ...

but codegraph does not have info for fields actually, maybe better to 
start from 5c-in-ocaml :) 

Also it adds many dependencies. Maybe easier to start from scratch
and precisely from 5c-in-ocaml?

***** resume 5c-in-ocaml on code of mk
parse correctly everything?

***** fix LOC and preprocessor
need take pen and paper and go through ...
maybe can save result and present it in Compiler.nw or something.
Hard to understand tables.

***** start generate the defs

***** start generate the uses
need resolve, but have type information so should be doable.

***** look at code of graph_code_clang.ml because when I was using clang
I had to dedupe files because I was also processing preprocessed ASTs


*** syncweb/ctwill mini indexes

**** later: generate mini-index a la ctwill?
or maybe better the mini-index a la noweb in the end?
see below

**** can use ctwillmac with latex?
try hand generate some \mini
reread milp.pdf?
=> I can generate everything from scratch, without even using noweb or cweb

but seems hard. plain tex and latex seems incompatible

**** send email to Hanson and Ramsey to learn about mini-index on
left and right places?
Or can incorporate ctwill macros??
Or look in .aux file a la nuweb and generate myself?

**** later: can noweb generate mini-indexes like ctwill does?
it generates defs/uses after each chunk, nice, but I prefer
the mini-indexes I think
dave hanson managed to do it

**** build mini-indexes like in Hanson books, like ctwill of Knuth,
but filter to only put important crossref? like not the one available
on the same page?

apparently according to http://www.literateprogramming.com/best.pdf
the index information is generated in raw form from noweb in latex file,
and david hanson wrote Icon program to dig in .aux file and build 
the mini-indexes

use margin notes?
