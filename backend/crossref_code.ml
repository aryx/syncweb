open Common

open Web

(*****************************************************************************)
(* Types  *)
(*****************************************************************************)

(* yet another Parse_info.token_location, 
 * but I don't want to depend on pfff/h_program-lang *)
type loc = { 
  file: Common.filename;
  line: int;
}
(* yet another Entity_code.t,
 * but I don't want to depend on pfff/h_program-lang *)
type def_kind =
  | Function

type use_kind =
  | Call

type defs = (loc * string * def_kind) list
type uses = (loc * string * use_kind) list

(*****************************************************************************)
(* Parsing  *)
(*****************************************************************************)

(* todo: graph_code_c add some '__<int>' suffix for static functions *)
let adjust_name s =
  s

(* the data is generated by ../indexer/index_pfff.ml *)
let parse_defs_and_uses file =
  let defs = ref [] in
  let uses = ref [] in
  Common.cat file |> List.iter (fun s ->
    let xs = Str.split_delim (Str.regexp ":") s in
    match xs with
    | ["DEF";"function";file;line;name] ->
      defs |> Common.push ({file;line = int_of_string line},
                           adjust_name name, Function)
    | ["USE";"call";file;line;name] ->
      uses |> Common.push ({file;line = int_of_string line},
                           adjust_name name, Call)
    | _ -> failwith (spf "unrecognized line in defs and uses file: %s" s)
  );
  !defs, !uses

(*****************************************************************************)
(* Chunkid <-> loc list  *)
(*****************************************************************************)

(*****************************************************************************)
(* Chunkid -> defs * uses *)
(*****************************************************************************)
let hdefs_and_uses_of_chunkid__from_orig orig (defs, uses) =
  let hchunkname_to_defs = Crossref_chunk.hchunkname_to_defs__from_orig orig in

  let hresult = Hashtbl.create 101 in

  (* step1: get the list of files mentioned in defs and uses, so we know
   * all the toplevel file chunks
   *)
  let files =
    ((defs |> List.map (fun (x, _, _) -> x.file))@
     (uses |> List.map (fun (x, _, _) -> x.file))) |> Common2.uniq
  in

  (* step2: tangle the toplevel file chunks (e.g., mk/main.c) while
   * remembering which LOC correspond to which chunkid
   *)
  (* use Hashtbl.find_all property *)
  let hchunkid_to_locs = Hashtbl.create 101 in
  files |> List.iter (fun file ->
    let loc = ref 1 in
    (* similar to web_to_code.ml *)
    let rec aux key =
      let defs = Hashtbl.find_all hchunkname_to_defs key in
      defs |> List.iter (fun (def, body) -> 
        (* this assumes you are using -less_marks *)
        incr loc; (* the s: or x: mark *)
        let id = def.chunkdef_id in
        body |> List.iter (function
          | Code _ -> 
            Hashtbl.add hchunkid_to_locs id ({ file; line = !loc});
            incr loc
          | ChunkName (key, _indent) ->
            aux key
        );
        incr loc (* the e: mark *)
      )
    in
    aux file
  );

  (* step3: create hashtbl to go from file x LOC to defs and uses *)
  let hloc_to_defs_uses = 
    ((defs |> List.map (fun (loc, a, b) -> loc, Left (loc, a, b))) @
     (uses |> List.map (fun (loc, a, b) -> loc, Right (loc, a, b)))
    ) |> Common.hash_of_list
  in

  (* step4: iterate over all LOC for a chunkid and accumulate the defs
   * and uses there
   *)
  hchunkid_to_locs |> Hashtbl.iter (fun id _ ->
    let locs = Hashtbl.find_all hchunkid_to_locs id in
    let defs_uses = 
      locs |> Common.map_filter (fun loc ->
        Common2.hfind_option loc hloc_to_defs_uses
      )
    in
    let defs, uses = Common.partition_either (fun x -> x) defs_uses in
    Hashtbl.add hresult id (defs, uses)
  );
  hresult
