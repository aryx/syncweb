open Common

open Web

(*****************************************************************************)
(* Types  *)
(*****************************************************************************)

(* yet another Parse_info.token_location, 
 * but I don't want to depend on pfff/h_program-lang *)
type loc = { 
  file: Common.filename;
  line: int;
}
(* yet another Entity_code.t,
 * but I don't want to depend on pfff/h_program-lang *)
type def_kind =
  | Function

type use_kind =
  | Call

type defs = (loc * string * def_kind) list
type uses = (loc * string * use_kind) list

(*****************************************************************************)
(* Parsing  *)
(*****************************************************************************)

(* todo: graph_code_c add some '__<int>' suffix for static functions *)
let adjust_name s =
  s

(* the data is generated by ../indexer/index_pfff.ml *)
let parse_defs_and_uses file =
  let defs = ref [] in
  let uses = ref [] in
  Common.cat file |> List.iter (fun s ->
    let xs = Str.split_delim (Str.regexp ":") s in
    match xs with
    | ["DEF";"function";file;line;name] ->
      defs |> Common.push ({file;line = int_of_string line},
                           adjust_name name, Function)
    | ["USE";"call";file;line;name] ->
      uses |> Common.push ({file;line = int_of_string line},
                           adjust_name name, Call)
    | _ -> failwith (spf "unrecognized line in defs and uses file: %s" s)
  );
  !defs, !uses

(*****************************************************************************)
(* Chunkid <-> loc list  *)
(*****************************************************************************)

(*****************************************************************************)
(* Chunkid -> defs * uses *)
(*****************************************************************************)
let hdefs_and_uses_of_chunkid__from_orig orig (defs, uses) =
  raise Todo
